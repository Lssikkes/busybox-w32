name: Build BusyBox (Static Binaries)

on:
  push:
    branches: ["**"]   # This now runs on all branches.
  pull_request:
    branches: [master]  # PR trigger remains for PRs that target master.

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: linux-x64
            arch: x64
            cross_prefix: x86_64-buildroot-linux-uclibc-
            cross_compiler: gcc
            toolchain_url: https://toolchains.bootlin.com/downloads/releases/toolchains/x86-64/tarballs/x86-64--uclibc--stable-2024.05-1.tar.xz
            artifact_name: busybox-linux-x64
          - target: linux-arm64
            arch: arm64
            cross_prefix: aarch64-buildroot-linux-uclibc-
            cross_compiler: gcc
            toolchain_url: https://toolchains.bootlin.com/downloads/releases/toolchains/aarch64/tarballs/aarch64--uclibc--stable-2024.05-1.tar.xz
            artifact_name: busybox-linux-arm64
          - target: windows-x64
            arch: x64
            cross_prefix: x86_64-w64-mingw32-
            cross_compiler: clang
            toolchain_url: "https://github.com/mstorsjo/llvm-mingw/releases/download/20250402/llvm-mingw-20250402-ucrt-ubuntu-20.04-x86_64.tar.xz"
            artifact_name: busybox-windows-x64.exe
          - target: windows-arm64
            arch: arm64
            cross_prefix: aarch64-w64-mingw32-
            cross_compiler: clang
            # Note: Even for windows-arm64 we use the x86_64 build of the toolchain.
            toolchain_url: "https://github.com/mstorsjo/llvm-mingw/releases/download/20250402/llvm-mingw-20250402-ucrt-ubuntu-20.04-x86_64.tar.xz"
            artifact_name: busybox-windows-arm64.exe

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      # Install uClibc toolchain for Linux targets
      - name: Install uClibc cross-toolchain
        if: contains(matrix.target, 'linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y xz-utils
          echo "Downloading uClibc toolchain for ${{ matrix.target }}..."
          wget -q ${{ matrix.toolchain_url }} -O toolchain.tar.xz
          tar -Jxf toolchain.tar.xz
          TOOLCHAIN_DIR=$(basename "${{ matrix.toolchain_url }}" .tar.xz)
          echo "Extracted toolchain to $TOOLCHAIN_DIR"
          echo "$PWD/$TOOLCHAIN_DIR/bin" >> $GITHUB_PATH

      # Install LLVM-MinGW toolchain for Windows targets
      - name: Install LLVM-MinGW for Windows build
        if: startsWith(matrix.target, 'windows')
        run: |
          sudo apt-get update
          sudo apt-get install -y xz-utils
          echo "Downloading LLVM-MinGW toolchain for Windows (UCRT)..."
          wget -q ${{ matrix.toolchain_url }} -O toolchain.tar.xz
          tar -Jxf toolchain.tar.xz
          TOOLCHAIN_DIR=$(basename "${{ matrix.toolchain_url }}" .tar.xz)
          echo "Extracted toolchain to $TOOLCHAIN_DIR"
          echo "$PWD/$TOOLCHAIN_DIR/bin" >> $GITHUB_PATH

      - name: Configure BusyBox (defconfig + static)
        env:
          CROSS_COMPILE: ${{ matrix.cross_prefix }}
          CROSS_COMPILER: ${{ matrix.cross_compiler }}
        run: |
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            make mingw64_defconfig
          else
            make defconfig
            sed -i 's/^# CONFIG_STATIC is not set/CONFIG_STATIC=y/' .config
          fi

      - name: Patch BusyBox config for Wget
        run: bash scripts/patch_config.sh

      - name: Build BusyBox
        env:
          CROSS_COMPILE: ${{ matrix.cross_prefix }}
          CROSS_COMPILER: ${{ matrix.cross_compiler }}
        run: make -j$(nproc)
      
      - name: Rename output binary
        run: |
          if [[ "${{ matrix.target }}" == *"windows"* ]]; then
            mv busybox.exe ${{ matrix.artifact_name }}
          else
            mv busybox ${{ matrix.artifact_name }}
          fi

      - name: Upload BusyBox artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/master'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ github.run_number }}"
          release_name: "BusyBox Build v${{ github.run_number }}"
          draft: false
          prerelease: false
          
      # Zip the entire artifacts folder into a single file.
      - name: Zip all artifacts
        run: |
          zip -r busybox.zip artifacts

      # Upload the single ZIP file as a release asset.
      - name: Upload All Artifacts as a Single Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: busybox.zip
          asset_name: busybox.zip
          asset_content_type: application/zip
